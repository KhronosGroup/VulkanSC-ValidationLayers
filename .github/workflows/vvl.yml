# Copyright (c) 2021-2025 Valve Corporation
# Copyright (c) 2021-2025 LunarG, Inc.
# Copyright (c) 2023-2025 RasterGrid Kft.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: VVL (Build/Tests)

# https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  # github.head_ref is only defined on pull_request
  # Fallback to the run ID, which is guaranteed to be both unique and defined for the run.
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id  }}
  cancel-in-progress: true

on:
    push:
    pull_request:
        branches:
            - sc_main

env:
  CMAKE_GENERATOR: Ninja

permissions:
  contents: read

jobs:
  code-format:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: clang-format version
        run: clang-format --version
      - name: Execute Source Code Format Checking Script
        run: python3 scripts/check_code_format.py --fetch-main --target-refspec=FETCH_HEAD

  linux:
    needs: check_vvl
    runs-on: ubuntu-24.04
    name: "linux (address sanitizer, ${{matrix.config}}, robinhood ${{matrix.robin_hood}} )"
    strategy:
      fail-fast: false
      matrix:
        config: [ release ]
        # Test with Robin Hood disabled
        # Chromium build, and some package managers don't use it.
        robin_hood: [ "ON", "OFF" ]
    steps:
      - uses: actions/checkout@v4
      - uses: lukka/get-cmake@latest
      - uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.config }}-address-${{matrix.robin_hood}}
      - run: sudo apt-get -qq update && sudo apt-get install -y libwayland-dev xorg-dev
      - run: python scripts/tests_vksc.py --build --config ${{ matrix.config }} --cmake='-DUSE_ROBIN_HOOD_HASHING=${{matrix.robin_hood}}'
        env:
          CFLAGS: -fsanitize=address
          CXXFLAGS: -fsanitize=address
          LDFLAGS: -fsanitize=address
          CMAKE_C_COMPILER_LAUNCHER: ccache
          CMAKE_CXX_COMPILER_LAUNCHER: ccache
      - name: Test Max Profile
        run: python scripts/tests_vksc.py --test
        env:
          VKSC_DEVSIM_PROFILE_FILE: ${{ github.workspace }}/tests/vulkansc/device_profiles/max_profile.json
      - name: Test Max Core
        run: python scripts/tests_vksc.py --test
        env:
          VKSC_DEVSIM_PROFILE_FILE: ${{ github.workspace }}/tests/vulkansc/device_profiles/max_core.json
      - name: Test Min Core
        run: python scripts/tests_vksc.py --test
        env:
          VKSC_DEVSIM_PROFILE_FILE: ${{ github.workspace }}/tests/vulkansc/device_profiles/min_core.json
      - name: Test No SPIR-V Debug Info
        run: python scripts/tests_vksc.py --test
        env:
          VKSC_DEVSIM_PROFILE_FILE: ${{ github.workspace }}/tests/vulkansc/device_profiles/max_profile.json
          VKSC_LAYER_TESTS_NO_SPV_DEBUG_INFO: TRUE

  # Make sure a debug version builds, but no need to run tests on it (since we do with release already)
  linux-debug:
    needs: check_vvl
    runs-on: ubuntu-24.04
    name: "linux (Build Only, ${{matrix.config}}, robinhood ${{matrix.robin_hood}} )"
    strategy:
      fail-fast: false
      matrix:
        config: [ debug ]
        robin_hood: [ "ON" ]
    steps:
      - uses: actions/checkout@v4
      - uses: lukka/get-cmake@latest
      - uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.config }}-buildOnly-${{matrix.robin_hood}}
      - run: sudo apt-get -qq update && sudo apt-get install -y libwayland-dev xorg-dev
      - run: python scripts/tests_vksc.py --build --config ${{ matrix.config }} --cmake='-DUSE_ROBIN_HOOD_HASHING=${{matrix.robin_hood}}'
        env:
          CMAKE_C_COMPILER_LAUNCHER: ccache
          CMAKE_CXX_COMPILER_LAUNCHER: ccache

  linux-tsan:
    needs: check_vvl
    runs-on: ubuntu-24.04
    name: "linux (thread sanitizer, ${{matrix.config}}, robinhood ${{matrix.robin_hood}} )"
    strategy:
      fail-fast: false
      matrix:
        # Have found over time debug finds nothing extra, while taking the longest and using the most CI minutes.
        config: [ release ]
        robin_hood: [ "ON" ]

    steps:
      - uses: actions/checkout@v4
      - uses: lukka/get-cmake@latest
      - uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.config }}-thread-${{matrix.robin_hood}}
      - run: sudo apt-get -qq update && sudo apt-get install -y libwayland-dev xorg-dev
      - run: python scripts/tests_vksc.py --build --config ${{ matrix.config }} --cmake='-DUSE_ROBIN_HOOD_HASHING=${{matrix.robin_hood}}'
        env:
          CFLAGS: -fsanitize=thread
          CXXFLAGS: -fsanitize=thread
          LDFLAGS: -fsanitize=thread
          CMAKE_C_COMPILER_LAUNCHER: ccache
          CMAKE_CXX_COMPILER_LAUNCHER: ccache
      # Thread Sanitize will take about 9x longer to run than Address Sanitize.
      # The main reason we have Max Core and Min Core is to catch issues with Vulkan 1.x vs Vulkan 1.y version issues.
      # In effort to reduce the bottle neck time in testing, skipping these for Thread Sanitize.
      - name: Test Max Profile
        run: python scripts/tests_vksc.py --test --tsan
        env:
          VKSC_DEVSIM_PROFILE_FILE: ${{ github.workspace }}/tests/vulkansc/device_profiles/max_profile.json

  windows:
    needs: check_vvl
    runs-on: windows-2022
    strategy:
      matrix:
        arch: [ amd64, amd64_x86 ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
      - name: Cache known_good.json installations
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            build-ci/external/glslang/build/install
            build-ci/external/googltest/build/install
            build-ci/external/mimalloc/build/install
            build-ci/external/robin-hood-hashing/build/install
            build-ci/external/SPIRV-Headers/build/install
            build-ci/external/SPIRV-Tools/build/install
            build-ci/external/Vulkan-Headers/build/install
            build-ci/external/Vulkan-Utility-Libraries/build/install
          key: windows-dependencies-${{ matrix.arch }}-${{ hashfiles('scripts/known_good.json') }}
      - name: Build
        run: python3 scripts/tests_vksc.py --build --config debug --cmake='-DUPDATE_DEPS_SKIP_EXISTING_INSTALL=ON'
      - name: Test Max Profile
        run: python scripts/tests_vksc.py --test
        env:
          VKSC_DEVSIM_PROFILE_FILE: ${{ github.workspace }}/tests/vulkansc/device_profiles/max_profile.json
      - name: Test No SPIR-V Debug Info
        run: python scripts/tests_vksc.py --test
        env:
          VKSC_DEVSIM_PROFILE_FILE: ${{ github.workspace }}/tests/vulkansc/device_profiles/max_profile.json
          VKSC_LAYER_TESTS_NO_SPV_DEBUG_INFO: TRUE

  mingw:
    needs: check_vvl
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: mingw-ccache
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - uses: lukka/get-cmake@latest
      - run: |
          cmake -S. -B build \
          -D BUILD_WERROR=ON \
          -D UPDATE_DEPS=ON \
          -D CMAKE_BUILD_TYPE=Release
        env:
          LDFLAGS: -fuse-ld=lld # MINGW linking is very slow. Use llvm linker instead.
          CMAKE_C_COMPILER_LAUNCHER: ccache
          CMAKE_CXX_COMPILER_LAUNCHER: ccache
      - run: cmake --build build
      - run: cmake --install build --prefix /tmp

  check_vvl:
    needs: code-format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - run: python3 -m pip install pyparsing
      - run: scripts/update_deps.py --dir ext --no-build
      - run: scripts/generate_source.py --verify ext/Vulkan-Headers/registry/ ext/SPIRV-Headers/include/spirv/unified1/
      - run: scripts/vk_validation_stats.py ext/Vulkan-Headers/registry/validusage.json -summary -c
