{
    "VkLayerTest": {
        "*": "VkLayerTest",

        "@disabled-depends-AllocationCallbacks": [
            "The test cases below are disabled as they test allocator callbacks which aren't supported in Vulkan SC"
        ],
        "InvalidAllocationCallbacks": false,

        "@disabled-depends-splitInstanceBindRegions": [
            "Test cases depend on split-instance bind regions image create flag which isn't supported in Vulkan SC"
        ],
        "InvalidImageCreateFlagWithPhysicalDeviceCount": false,

        "@disabled-replaced": "These test cases are replaced with Vulkan SC specific ones",
        "LeakAnObject": false,
        "SpecLinks": false,

        "@disabled-assumes-preVulkan12": [
            "These tests assume support for a pre-Vulkan 1.2 version, but that's not possible",
            "in Vulkan SC where version 1.0 inherits Vulkan 1.2 support, including e.g. GPDP2 support"
        ],
        "UnsupportedPnextApiVersion": false,
        "DeviceFeature2AndVertexAttributeDivisorExtensionUnenabled": false,
        "UsePnextOnlyStructWithoutExtensionEnabled": false,

        "@disabled-depends-deprecated-debug-markers": [
            "Test case depends on the deprecated VK_EXT_debug_marker extension that is not supported in Vulkan SC"
        ],
        "DebugMarkerNameTest": false,

        "@disabled-depends-VK_EXT_validation_cache": "Test cases use unsupported extension in Vulkan SC",
        "ValidationCacheTestBadMerge": false,

        "@disabled-depends-VK_KHR_portability_enumeration": [
            "Test case depends on support for VK_KHR_portability_enumeration without actually checking support for it",
            "or enabling it in the first place, and this extension is not supported in Vulkan SC"
        ],
        "InstanceCreateEnumeratePortability": false
    },
    "VkPositiveLayerTest": {
        "*": "VkPositiveLayerTest",

        "@disabled-depends-vkTrimCommandBuffer": "Test case looks for removed entry point",
        "GetDevProcAddrExtensions": false,

        "@disabled-temporary-instance-extensions": [
            "TODO: Vulkan SC - This test relies on the generated instance extension list which",
            "contains a combined set currently, so this may need some test framework tweaks to",
            "get it working"
        ],
        "ExtensionsInCreateInstance": false,

        "@disabled-depends-WSI": [
            "The test cases below are disabled because they depend on WSI functionalities",
            "without actually verifying support for them"
        ],
        "TestPhysicalDeviceSurfaceSupport": false
    },
    "RenderPassCreatePotentialFormatFeaturesTest": {
        "*": "RenderPassCreatePotentialFormatFeaturesTest"
    },
    "DynamicRenderingCommandBufferInheritanceRenderingInfoTest": {
        "*": "DynamicRenderingCommandBufferInheritanceRenderingInfoTest"
    },
    "NegativeAtomic": {
        "@disabled-depends-SPIRV-validation": [
            "TODO: Vulkan SC - These tests rely on being able to validate against SPIR-V contents",
            "which is not possible on Vulkan SC without actual SPIR-V data as debug information"
        ],
        "ImageInt64": false,
        "ImageInt64Drawtime32": false,
        "ImageInt64Drawtime64": false,
        "Float2": false,
        "VertexStoresAndAtomicsFeatureDisable": false,
        "FragmentStoresAndAtomicsFeatureDisable": false,
        "InvalidStorageOperation": false
    },
    "NegativeBuffer": {
        "@disabled-depends-vkFreeMemory": "Test cases test the removed vkFreeMemory command's effects",
        "@VertexBuffer-comment": "TODO: Vulkan SC - only a small subset of the subtests rely on vkFreeMemory",
        "VertexBuffer": false
    },
    "NegativeCommand": {
        "@disabled-assumes-preVulkan12": [
            "These tests assume support for a pre-Vulkan 1.2 version, but that's not possible",
            "in Vulkan SC where version 1.0 inherits Vulkan 1.2 support, including e.g. GPDP2 support"
        ],
        "CopyImageDepthStencilFormatMismatch": false,

        "@disabled-depends-maintenance1": [
            "TODO: Vulkan SC - These tests depend on the VK_KHR_maintenance1 extension string itself",
            "which is not present in Vulkan SC as it is part of Vulkan SC 1.0 core (inherited from Vulkan 1.1)"
        ],
        "CopyImageLayerCountMismatch": false,

        "@disabled-may-depend-SPIRV-validation": [
            "TODO: Vulkan SC - These tests also likely rely on SPIR-V validation",
            "Needs further investigation"
        ],
        "DrawTimeImageViewTypeMismatchWithPipeline": false,
        "DrawTimeImageMultisampleMismatchWithPipeline": false,
        "DrawTimeImageComponentTypeMismatchWithPipeline": false
    },
    "NegativeDescriptorIndexing": {
        "@disabled-alreadyPromoted": [
            "The test cases below depend on pre-Vulkan 1.2 support, hence do not apply to Vulkan SC"
        ],
        "SetLayoutWithoutExtension": false
    },
    "NegativeDescriptors": {
        "@disabled-depends-vkFreeMemory": "Test cases test the removed vkFreeMemory command's effects",
        "DescriptorImageUpdateNoMemoryBound": false,

        "@disabled-depends-SPIRV-validation": [
            "TODO: Vulkan SC - These tests rely on being able to validate against SPIR-V contents",
            "which is not possible on Vulkan SC without actual SPIR-V data as debug information"
        ],
        "DispatchWithUnboundSet": false,

        "@disabled-may-depend-SPIRV-validation": [
            "TODO: Vulkan SC - These tests also likely rely on SPIR-V validation",
            "Needs further investigation"
        ],
        "DynamicOffsetWithNullBuffer": false,
        "@DescriptorSetCompatibility": "TODO: Vulkan SC - only a small subset of the subtests are SPIR-V dependent",
        "DescriptorSetCompatibility": false,
        "ImageDescriptorLayoutMismatch": false,
        "ImageSubresourceOverlapBetweenAttachmentsAndDescriptorSets": false,
        "ImageSubresourceOverlapBetweenRenderPassAndDescriptorSets": false,
        "DescriptorReadFromWriteAttachment": false,
        "DescriptorWriteFromReadAttachment": false,
        "WriteDescriptorSetConsecutiveUpdates": false,
        "CmdBufferDescriptorSetBufferDestroyed": false,
        "DrawDescriptorSetBufferDestroyed": false,
        "CmdBufferDescriptorSetImageSamplerDestroyed": false,
        "DescriptorSetSamplerDestroyed": false,
        "DescriptorPoolInUseResetSignaled": false,

        "@disabled-depends-VK_KHR_push_descriptors": [
            "Test case depends on support for VK_KHR_push_descriptors without actually checking support for it",
            "or enabling it in the first place, and this extension is not supported in Vulkan SC"
        ],
        "PushDescriptorSetLayoutWithoutExtension": false
    },
    "NegativeDynamicState": {
        "@disabled-dependency-incorrect": "This test case has incorrect dependency handling",
        "DiscardRectanglesVersion": false
    },
    "NegativeGeometryTessellation": {
        "@disabled-depends-SPIRV-validation": [
            "TODO: Vulkan SC - These tests rely on being able to validate against SPIR-V contents",
            "which is not possible on Vulkan SC without actual SPIR-V data as debug information"
        ],
        "PointSizeGeomShaderDontWrite": false,
        "PointSizeGeomShaderWrite": false,
        "BuiltinBlockOrderMismatchVsGs": false,
        "BuiltinBlockSizeMismatchVsGs": false,
        "TessellationPatchDecorationMismatch": false,
        "MaxTessellationControlInputOutputComponents": false,
        "MaxTessellationEvaluationInputOutputComponents": false,
        "MaxGeometryInputOutputComponents": false,
        "MaxGeometryInstanceVertexCount": false,
        "GeometryShaderEnabled": false,
        "TessellationShaderEnabled": false
    },
    "NegativeFragmentShadingRate": {
        "@disabled-depends-SPIRV-validation": [
            "TODO: Vulkan SC - These tests rely on being able to validate against SPIR-V contents",
            "which is not possible on Vulkan SC without actual SPIR-V data as debug information"
        ],
        "PrimitiveFragmentShadingRateWriteMultiViewportLimitDynamic": false,
        "PrimitiveWriteMultiViewportLimit": false
    },
    "NegativeImage": {
        "@disabled-assumes-preVulkan12": [
            "These tests assume support for a pre-Vulkan 1.2 version, but that's not possible",
            "in Vulkan SC where version 1.0 inherits Vulkan 1.2 support, including e.g. GPDP2 support"
        ],
        "CreateImageSharingModeConcurrentQueueFamilies": false,
        "ImageViewLayerCount": false,
        "ImageViewBreaksParameterCompatibilityRequirements": false,
        "ImageViewInvalidSubresourceRange": false,

        "@disabled-replaced": "These test cases are replaced with Vulkan SC specific ones",
        "ImageMisc": false,
        "@disabled-depends-SPIRV-validation": [
            "TODO: Vulkan SC - These tests rely on being able to validate against SPIR-V contents",
            "which is not possible on Vulkan SC without actual SPIR-V data as debug information"
        ],
        "ComputeImageLayout11": false,

        "@disabled-temporary-expects-unsupported-cap": [
            "TODO: Vulkan SC - This test expects some capabilities that are not actually reported by MockICD"
        ],
        "GetPhysicalDeviceImageFormatProperties": false,

        "@disabled-depends-VK_EXT_image_view_min_lod": "Test cases use unsupported extension in Vulkan SC",
        "ImageViewMinLodFeature": false
    },
    "PositiveInstance": {
        "@disabled-replaced": "These test cases are replaced with Vulkan SC specific ones",
        "ValidationInstanceExtensions": false
    },
    "NegativeInstanceless": {
        "@disabled-depends-AllocationCallbacks": [
            "The test cases below are disabled as they test allocator callbacks which aren't supported in Vulkan SC"
        ],
        "DestroyInstanceAllocationCallbacksCompatibility": false
    },
    "NegativeMemory": {
        "@disabled-replaced": "These test cases are replaced with Vulkan SC specific ones",
        "BindMemory": false
    },
    "PositiveMemory": {
        "@disabled-temporary-other": [
            "TODO: Vulkan SC - These tests fail for some reason",
            "Needs further investigation"
        ],
        "BindImageMemoryMultiThreaded": false
    },
    "NegativeMultiview": {
        "@disabled-assumes-preVulkan12": [
            "These tests assume support for a pre-Vulkan 1.2 version, but that's not possible",
            "in Vulkan SC where version 1.0 inherits Vulkan 1.2 support, including e.g. GPDP2 support"
        ],
        "FeaturesDisabled": false
    },
    "NegativeObjectLifetime": {
        "@disabled-depends-vkFreeMemory": "Test cases test the removed vkFreeMemory command's effects",
        "CmdBarrierBufferDestroyed": false,
        "CmdBarrierImageDestroyed": false,
        "Sync2CmdBarrierBufferDestroyed": false,
        "Sync2CmdBarrierImageDestroyed": false,
        "FramebufferAttachmentMemoryFreed": false,

        "@disabled-may-depend-SPIRV-validation": [
            "TODO: Vulkan SC - These tests also likely rely on SPIR-V validation",
            "Needs further investigation"
        ],
        "CmdBufferBufferViewDestroyed": false,
        "DescriptorPoolInUseDestroyedSignaled": false,
        "ImageViewInUseDestroyedSignaled": false,
        "BufferViewInUseDestroyedSignaled": false,
        "SamplerInUseDestroyedSignaled": false
    },
    "NegativePipeline": {
        "@disabled-depends-vkMergePipelineCaches": "Test cases test the removed vkMergePipelineCaches command's effects",
        "MergePipelineCachesInvalidDst": false,

        "@disabled-depends-derivativePipelines": [
            "Test cases depend on derivative pipelines which aren't supported in Vulkan SC"
        ],
        "CreateComputesPipelineWithBadBasePointer": false,
        "CreateGraphicsPipelineWithBadBasePointer": false,

        "@disabled-depends-Vulkan-behavior": "Test cases depend on Vulkan behavior that is changed in Vulkan SC",
        "NullStagepName": false,

        "@disabled-depends-SPIRV-validation": [
            "TODO: Vulkan SC - These tests rely on being able to validate against SPIR-V contents",
            "which is not possible on Vulkan SC without actual SPIR-V data as debug information"
        ],
        "MissingEntrypoint": false,
        "ShaderDrawParametersNotEnabled10": false,
        "ShaderDrawParametersNotEnabled11": false,
        "NotCompatibleForSet": false,

        "@disabled-depends-VK_QCOM_render_pass_shader_resolve": [
            "Test case depends on support for VK_QCOM_render_pass_shader_resolve without actually checking support for it",
            "or enabling it in the first place, and this extension is not supported in Vulkan SC"
        ],
        "SubpassRasterizationSamples": false,

        "@disabled-depends-on-misc-unsupported-extensions": [
            "Test cases depends on miscellaneous extensions not supported in Vulkan SC"
        ],
        "CreateFlags": false,
        "CreateFlagsCompute": false
    },
    "NegativePipelineLayout": {
        "@disabled-depends-SPIRV-validation": [
            "TODO: Vulkan SC - These tests rely on being able to validate against SPIR-V contents",
            "which is not possible on Vulkan SC without actual SPIR-V data as debug information"
        ],
        "DescriptorTypeMismatch": false,
        "DescriptorTypeMismatchCompute": false,
        "DescriptorTypeMismatchNonCombinedImageSampler": false,
        "MissingDescriptor": false,
        "DescriptorNotAccessible": false,
        "UniformBlockNotProvided": false
    },
    "NegativePipelineTopology": {
        "@disabled-depends-SPIRV-validation": [
            "TODO: Vulkan SC - These tests rely on being able to validate against SPIR-V contents",
            "which is not possible on Vulkan SC without actual SPIR-V data as debug information"
        ],
        "PointSize": false
    },
    "NegativeQuery": {
        "@disabled-depends-vkDestroyQueryPool": "Test cases test the removed vkDestroyQueryPool command's effects",
        "CmdBufferQueryPoolDestroyed": false,
        "PoolInUseDestroyedSignaled": false,
        "DestroyActiveQueryPool": false,
        "DestroyWithoutQueryPool": false,

        "@disabled-depends-GPDP2-KHR": [
            "TODO: Vulkan SC - These tests require the KHR GPDP2 extension to be present",
            "which is not supported in Vulkan SC (it is part of Vulkan SC 1.0 instead)",
            "and do not handle corrently when that is not the case (by skipping the test case)."
        ],
        "HostyResetQueryPool": false,
        "HostyResetDevice": false,
        "HostyResetBadRange": false
    },
    "NegativeRenderPass": {
        "@disabled-assumes-preVulkan12": [
            "These tests assume support for a pre-Vulkan 1.2 version, but that's not possible",
            "in Vulkan SC where version 1.0 inherits Vulkan 1.2 support, including e.g. GPDP2 support"
        ],
        "RenderArea": false
    },
    "PositiveRenderPass": {
        "@disabled-temporary-other": [
            "TODO: Vulkan SC - These tests fail for some reason",
            "Needs further investigation"
        ],
        "SingleMipTransition": false
    },
    "NegativeSampler": {
        "@disabled-depends-SPIRV-validation": [
            "TODO: Vulkan SC - These tests rely on being able to validate against SPIR-V contents",
            "which is not possible on Vulkan SC without actual SPIR-V data as debug information"
        ],
        "UnnormalizedCoordinatesCombinedSampler": false,
        "UnnormalizedCoordinatesSeparateSampler": false,
        "UnnormalizedCoordinatesSeparateSamplerSharedImage": false,
        "UnnormalizedCoordinatesSeparateSamplerSharedSampler": false,
        "UnnormalizedCoordinatesInBoundsAccess": false,

        "@disabled-depends-VK_KHR_sampler_mirror_clamp_to_edge": [
            "Test cases use unsupported extension in Vulkan SC which is part of core",
            "but could be ported to work against a Vulkan SC implementation with appropriate test changes"
        ],
        "MirrorClampToEdgeNotEnabled": false,

        "@disabled-depends-VK_EXT_border_color_swizzle": "Test cases use unsupported extension in Vulkan SC",
        "BorderColorSwizzle": false,

        "@disabled-temporary-QNX-stack-size": [
            "This test case uses too much stack space for QNX systems and hence it's currently disabled",
            "The test itself is skipped on Vulkan SC anyway, thus this does not limit test coverage"
        ],
        "CustomBorderColor": false
    },
    "NegativeShaderCompute": {
        "@disabled-depends-SPIRV-validation": [
            "TODO: Vulkan SC - These tests rely on being able to validate against SPIR-V contents",
            "which is not possible on Vulkan SC without actual SPIR-V data as debug information"
        ],
        "WorkgroupMemoryExplicitLayout": false,
        "SharedMemoryOverLimit": false,
        "SharedMemoryBooleanOverLimit": false,
        "SharedMemorySpecConstantDefault": false,
        "SharedMemorySpecConstantSet": false,
        "WorkGroupSizeSpecConstant": false,
        "WorkGroupSizeConstantDefault": false,
        "WorkGroupSizeSpecConstantDefault": false,
        "ZeroInitializeWorkgroupMemory": false
    },
    "NegativeShaderInterface": {
        "@disabled-depends-SPIRV-validation": [
            "TODO: Vulkan SC - These tests rely on being able to validate against SPIR-V contents",
            "which is not possible on Vulkan SC without actual SPIR-V data as debug information"
        ],
        "VsFsTypeMismatchVectorSize": false,
        "VertexOutputNotConsumed": false,
        "FragmentInputNotProvided": false,
        "FragmentInputNotProvidedInBlock": false,
        "VsFsTypeMismatch": false,
        "VsFsTypeMismatchInBlock": false,
        "VsFsMismatchByLocation": false,
        "VsFsMismatchByComponent": false,
        "InputOutputMismatch": false,
        "MaxVertexOutputComponents": false,
        "MaxComponentsBlocks": false,
        "MaxFragmentInputComponents": false,
        "AlphaToCoverageOutputLocation0": false,
        "AlphaToCoverageOutputNoAlpha": false,
        "VsFsTypeMismatchBlockStruct": false,
        "VsFsTypeMismatchBlockStruct64bit": false,
        "VsFsTypeMismatchBlockArrayOfStruct": false,
        "VsFsTypeMismatchBlockStructInnerArraySize": false,
        "VsFsTypeMismatchBlockStructOuterArraySize": false,
        "VsFsTypeMismatchBlockStructArraySizeVertex": false,
        "VsFsTypeMismatchBlockStructOuter2DArraySize": false,
        "VsFsTypeMismatchBlockNestedStructType64bit": false,
        "VsFsTypeMismatchBlockNestedStructArray": false,
        "MultidimensionalArray": false,
        "MultidimensionalArrayDim": false,
        "MultidimensionalArray64bit": false,
        "PackingInsideArray": false
    },
    "PositiveShaderInterface": {
        "@disabled-depends-SPIRV-validation": [
            "TODO: Vulkan SC - These tests rely on being able to validate against SPIR-V contents",
            "which is not possible on Vulkan SC without actual SPIR-V data as debug information"
        ],
        "AlphaToCoverageArrayIndex": false,
        "AlphaToCoverageArrayVec3": false
    },
    "NegativeShaderLimits": {
        "@disabled-depends-SPIRV-validation": [
            "TODO: Vulkan SC - These tests rely on being able to validate against SPIR-V contents",
            "which is not possible on Vulkan SC without actual SPIR-V data as debug information"
        ],
        "MinAndMaxTexelGatherOffset": false,
        "MinAndMaxTexelOffset": false
    },
    "NegativeShaderPushConstants": {
        "@disabled-depends-SPIRV-validation": [
            "TODO: Vulkan SC - These tests rely on being able to validate against SPIR-V contents",
            "which is not possible on Vulkan SC without actual SPIR-V data as debug information"
        ],
        "DrawWithoutUpdate": false,
        "MultipleEntryPoint": false,
        "NotInLayout": false,
        "NotDeclared": false
    },
    "NegativeShaderSpirv": {
        "@disabled-depends-SPIRV-validation": [
            "TODO: Vulkan SC - These tests rely on being able to validate against SPIR-V contents",
            "which is not possible on Vulkan SC without actual SPIR-V data as debug information"
        ],
        "CodeSize": false,
        "Magic": false,
        "SpecializationSizeZero": false,
        "SpecializationApplied": false,
        "SpecializationOffsetOutOfBounds": false,
        "SpecializationSizeOutOfBounds": false,
        "ShaderModuleCheckCapability": false,
        "ShaderNotEnabled": false,
        "NoUniformBufferStandardLayout10": false,
        "NoUniformBufferStandardLayout12": false,
        "NoScalarBlockLayout10": false,
        "NoScalarBlockLayout12": false,
        "FragmentShaderInterlockEnabled": false,
        "DemoteToHelperInvocation": false,
        "DynamicUniformIndex": false,
        "ConservativeRasterizationPostDepthCoverage": false,
        "DeviceMemoryScope": false,
        "QueueFamilyMemoryScope": false
    },
    "NegativeShaderStorageImage": {
        "@disabled-depends-SPIRV-validation": [
            "TODO: Vulkan SC - These tests rely on being able to validate against SPIR-V contents",
            "which is not possible on Vulkan SC without actual SPIR-V data as debug information"
        ],
        "MissingFormatRead": false,
        "MissingFormatWrite": false,
        "MissingNonReadableDecorationFormatRead": false,
        "MissingNonWritableDecorationFormatWrite": false,
        "WriteLessComponent": false,
        "WriteSpecConstantLessComponent": false,
        "UnknownWriteLessComponent": false
    },
    "NegativeShaderStorageTexel": {
        "@disabled-depends-SPIRV-validation": [
            "TODO: Vulkan SC - These tests rely on being able to validate against SPIR-V contents",
            "which is not possible on Vulkan SC without actual SPIR-V data as debug information"
        ],
        "WriteLessComponent": false
    },
    "NegativeSparse": {
        "@disabled": [
            "Test cases depend on sparse binding which isn't supported in Vulkan SC"
        ],
        "*": false
    },
    "PositiveSparse": {
        "@disabled": [
            "Test cases depend on sparse binding which isn't supported in Vulkan SC"
        ],
        "*": false
    },
    "NegativeSubgroup": {
        "@disabled-depends-SPIRV-validation": [
            "TODO: Vulkan SC - These tests rely on being able to validate against SPIR-V contents",
            "which is not possible on Vulkan SC without actual SPIR-V data as debug information"
        ],
        "Properties": false
    },
    "NegativeSubpass": {
        "@disabled-depends-SPIRV-validation": [
            "TODO: Vulkan SC - These tests rely on being able to validate against SPIR-V contents",
            "which is not possible on Vulkan SC without actual SPIR-V data as debug information"
        ],
        "SubpassInputNotBoundDescriptorSet": false,
        "SubpassInputWithoutFormat": false,
        "InputAttachmentMissing": false,
        "InputAttachmentMissingArray": false,
        "InputAttachmentSharingVariable": false
    },
    "NegativeSyncObject": {
        "@disabled-assumes-preVulkan12": [
            "These tests assume support for a pre-Vulkan 1.2 version, but that's not possible",
            "in Vulkan SC where version 1.0 inherits Vulkan 1.2 support, including e.g. GPDP2 support"
        ],
        "QueueSubmitBinarySemaphoreNotSignaled": false
    },
    "NegativeSyncVal": {
        "@disabled-depends-WSI": [
            "The test cases below are disabled because they depend on various WSI functionalities"
        ],
        "QSPresentAcquire": false,

        "@StageAccessExpansion-comment": [
            "TODO: Vulkan SC - This test fails to generate the appropriate sync hazard error",
            "or report additional hazards than expected",
            "Most likely a dependency on the SPIR-V code to be able to detect the right hazards"
        ],
        "CmdDispatchDrawHazards": false,
        "StageAccessExpansion": false,
        "RenderPassAsyncHazard": false
    },
    "NegativeVertexInput": {
        "@disabled-depends-SPIRV-validation": [
            "TODO: Vulkan SC - These tests rely on being able to validate against SPIR-V contents",
            "which is not possible on Vulkan SC without actual SPIR-V data as debug information"
        ],
        "AttributeNotConsumed": false,
        "AttributeLocationMismatch": false,
        "AttributeNotProvided": false,
        "AttributeTypeMismatch": false,
        "Attribute64bitInputAttribute": false,
        "Attribute64bitShaderInput": false,
        "Attribute64bitUnusedComponent": false,
        "Attribute64bitMissingComponent": false,
        "AttributeStructTypeFirstLocation": false,
        "AttributeStructTypeSecondLocation": false,
        "AttributeStructTypeBlockLocation": false,
        "AttributeStructTypeBlockLocation64bit": false
    },
    "PositiveVertexInput": {
        "@disabled-depends-SPIRV-validation": [
            "TODO: Vulkan SC - These tests rely on being able to validate against SPIR-V contents",
            "which is not possible on Vulkan SC without actual SPIR-V data as debug information"
        ],

        "AttributeStructTypeBlockLocation": false
    },
    "NegativeViewportInheritance": {
        "@disabled-depends-VK_NV_inherited_viewport_scissor": "Test cases use unsupported extension in Vulkan SC",
        "BasicUsage": false,
        "MissingFeature": false,
        "MultiViewport": false,
        "ScissorMissingFeature": false
    },
    "NegativeWsi": {
        "@disabled-depends-WSI": [
            "The test cases below are disabled because they depend on WSI functionalities",
            "without actually verifying support for them"
        ],
        "SurfaceSupportByPhysicalDevice": false,
        "CreatingWin32Surface": false,
        "QueuePresentWaitingSameSemaphore": false,
        "QueuePresentBinarySemaphoreNotSignaled": false,
        "SwapchainAcquireImageNoSync": false,
        "SwapchainAcquireImageNoSync2KHR": false,
        "SwapchainAcquireTooManyImages": false,
        "GetSwapchainImageAndTryDestroy": false,
        "SwapchainAcquireTooManyImages2KHR": false,
        "WarningSwapchainCreateInfoPreTransform": false,
        "LeakASwapchain": false,
        "GetSwapchainImagesCountButNotImages": false
    },
    "PositiveWsi": {
        "@rename-dead-code": [
            "These tests need renaming due to the limitations of gtest_add_tests"
        ],
        "ProtectedSwapchainImageColorAttachment": "InvalidTestGroup",

        "@disabled-depends-WSI": [
            "The test cases below are disabled because they depend on WSI functionalities",
            "without actually verifying support for them"
        ],
        "CreateSurface": false
    },
    "MultiDeviceTest": {
        "*": "MultiDeviceTest"
    },
    "VkVideoLayerTest": {
        "*": "VkVideoLayerTest"
    },
    "VkPositiveVideoLayerTest": {
        "*": "VkPositiveVideoLayerTest"
    },
    "VkPortabilitySubsetTest": {
        "*": "VkPortabilitySubsetTest"
    },
    "VkBestPracticesLayerTest": {
        "@disabled": [
            "We disable all best practices tests because Vulkan SC does not currently have best practices layers enabled"
        ],
        "*": false
    },
    "VkPositiveBestPracticesLayerTest": {
        "@disabled": [
            "We disable all best practices tests because Vulkan SC does not currently have best practices layers enabled"
        ],
        "*": false
    },
    "VkAmdBestPracticesLayerTest": {
        "@disabled": [
            "We disable all best practices tests because Vulkan SC does not currently have best practices layers enabled"
        ],
        "*": false
    },
    "VkArmBestPracticesLayerTest": {
        "@disabled": [
            "We disable all best practices tests because Vulkan SC does not currently have best practices layers enabled"
        ],
        "*": false
    },
    "VkNvidiaBestPracticesLayerTest": {
        "@disabled": [
            "We disable all best practices tests because Vulkan SC does not currently have best practices layers enabled"
        ],
        "*": false
    },
    "VkVideoBestPracticesLayerTest": {
        "@disabled": [
            "We disable all best practices tests because Vulkan SC does not currently have best practices layers enabled"
        ],
        "*": false
    },
    "VkGpuAssistedLayerTest": {
        "@disabled": [
            "We disable all GPU assisted validation test cases as they are not applicable to Vulkan SC"
        ],
        "*": false
    },
    "PositiveGpuAssistedLayer": {
        "@disabled": [
            "We disable all GPU assisted validation test cases as they are not applicable to Vulkan SC"
        ],
        "*": false
    },
    "NegativeDebugPrintf": {
        "@disabled": [
            "We disable all debug printf validation test cases as they are not applicable to Vulkan SC"
        ],
        "*": false
    }
}
